{"version":3,"sources":["components/userLocation.jsx","components/map.jsx","App.js","index.js"],"names":["UserLocation","props","className","size","Math","ceil","lat","lng","Map","useState","setLat","setLng","zoom","setZoom","userLat","setUserLat","userLng","setUserLng","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","onClick","defaultCenter","defaultZoom","center","controlSize","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAaeA,EAVM,SAACC,GAEpB,OACE,yBAAKC,UAAU,iBACb,kBAAC,IAAD,CAAgBC,KAAK,OACrB,4CAAcC,KAAKC,KAAiB,IAAZJ,EAAMK,KAAa,IAA3C,kBAAwDF,KAAKC,KAAiB,IAAZJ,EAAMM,KAAa,QC2C5EC,EA9CH,WAAO,IAAD,EAEMC,mBAAS,GAFf,mBAETH,EAFS,KAEJI,EAFI,OAGMD,mBAAS,GAHf,mBAGTF,EAHS,KAGJI,EAHI,OAIQF,mBAAS,GAJjB,mBAITG,EAJS,KAIHC,EAJG,OAMcJ,mBAAS,GANvB,mBAMTK,EANS,KAMAC,EANA,OAOcN,mBAAS,GAPvB,mBAOTO,EAPS,KAOAC,EAPA,KAShBC,qBAAU,WACJ,gBAAiBC,WACnBA,UAAUC,YAAYC,oBAAmB,SAAUC,GACjDP,EAAWO,EAASC,OAAOC,UAC3BP,EAAWK,EAASC,OAAOE,gBAG9B,IASH,OACE,yBAAKvB,UAAU,WACb,4BAAQwB,QARG,WACbhB,EAAOI,GACPH,EAAOK,GACPH,EAAQ,KAKmBX,UAAU,WAAnC,WACA,kBAAC,IAAD,CACEA,UAAU,MACVyB,cAAe,CAACrB,IAAK,UAAWC,IAAK,WACrCqB,YAAa,EACbhB,KAAMA,EACNiB,OAAQ,CAACvB,MAAKC,OACduB,YAAa,IAEb,kBAAC,EAAD,CACExB,IAAKQ,EACLP,IAAKS,O,MC9BAe,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCFN8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.32030632.chunk.js","sourcesContent":["import React from 'react';\nimport {FaRegDotCircle} from 'react-icons/fa';\n\nconst UserLocation = (props) => {\n\n  return (\n    <div className='user-location'>\n      <FaRegDotCircle size='40'/>\n      <div>{`Lat: ${Math.ceil(props.lat * 100) / 100}, Lng: ${Math.ceil(props.lng * 100) / 100}`}</div>\n    </div>\n  );\n}\n\nexport default UserLocation;","import React, {useState, useEffect} from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport UserLocation from './userLocation';\n\n\nconst Map = () => {\n\n  const [lat, setLat] = useState(0);\n  const [lng, setLng] = useState(0);\n  const [zoom, setZoom] = useState(5);\n\n  const [userLat, setUserLat] = useState(0);\n  const [userLng, setUserLng] = useState(0);\n\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setUserLat(position.coords.latitude);\n        setUserLng(position.coords.longitude);\n      });\n    }\n  }, []);\n\n\n  const FindMe = () => {\n    setLat(userLat);\n    setLng(userLng);\n    setZoom(11);\n  }\n  \n  return (\n    <div className='map-div'>\n      <button onClick={FindMe} className='find-me'>Find Me</button>\n      <GoogleMapReact\n        className='map'\n        defaultCenter={{lat: 59.955413, lng: 30.337844}}\n        defaultZoom={5}\n        zoom={zoom}\n        center={{lat, lng}}\n        controlSize={20}\n      >\n        <UserLocation\n          lat={userLat}\n          lng={userLng}\n        />\n      </GoogleMapReact>\n    </div>\n  );\n  \n}\n\nexport default Map;","import React from 'react';\nimport 'regenerator-runtime/runtime';\nimport Map from './components/map.jsx';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Map></Map>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'regenerator-runtime/runtime';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}